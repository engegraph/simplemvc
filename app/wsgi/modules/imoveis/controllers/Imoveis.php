<?php

namespace wSGI\Modules\Imoveis\Controllers;

use Core\Controller;

class Imoveis extends Controller
{
    public $model = 'Imovel';
    public $pageTitle = 'Imóveis';

    public function index() {
        $this->action = 'Listagem';
        $this->pageTitle = 'Imóveis';
        parent::index();


    }

    public function editar($id)
    {

        $Dir = path_storage('media' . DS . 'imoveis' . DS . $id);
        if (is_dir($Dir))    {

            $types = array( 'png', 'jpg', 'jpeg', 'gif' );
            if ( $handle = opendir($Dir) ) {
                while ( $entry = readdir( $handle ) ) {
                    $ext = strtolower( pathinfo( $entry, PATHINFO_EXTENSION) );
                    if( in_array( $ext, $types ) )
                        $AnexosListados[] = '../../../../storage/media/imoveis/' . $id . '/' .$entry;
                }
                closedir($handle);
            }

            $this->Anexos = $AnexosListados;
        } else {
            $this->Anexos = [];
        }



        return parent::editar($id); // TODO: Change the autogenerated stub
    }

    public function onExcluirPessoaVinculada()  {
        $Vinculo = VinculoPessoaImovel::find(post('idvinculo'));
        $Vinculo->delete();

        return ['resposta' => 'ok'];
    }

    public function onCarregaPessoas()   {
        $data = $this->model->rawQuery("select Id as id, Nome as value, concat('Nome: ', Nome, ' CPF: ', CpfCnpj) as label from pessoas where nome like '" . post('name_startsWith') . "%'");
        //return ['pessoas'=>$data];
        return $data;
    }

    public function onFormModalAddPessoas()
    {
        // Dados Enviados pelo formulário
        $Data = post();
        $Vinculo = new VinculoPessoaImovel();
        $Vinculo->ImovelId      = $Data['EdIdImovel'];
        $Vinculo->PessoaId      = $Data['EdIdPessoaAddImovel'];
        $Vinculo->TipoVinculoId = $Data['CbTipoVinculo'];
        $Vinculo->Percentual    = $Data['EdPercentual'];
        $Vinculo->Ativo         = 1;
        $IdVinculo = $Vinculo->save();

        $Pessoa = Pessoa::find($Data['EdIdPessoaAddImovel']);
        $Data['CpfCnpj'] = $Pessoa->CpfCnpj;

        $Vinculo = TipoVinculo::find($Data['CbTipoVinculo']);
        $Data['NomeVinculo'] = $Vinculo->Nome;
        $Data['Id'] = $IdVinculo;

        return  ['respostaAddPessoa' => $Data ];

    }

    public function onFormModalAddCaracteristica()  {
        // Dados Enviados pelo formulário
        $Data = post();
        $Caracteristica                         = new ImovelCaracteristicas();
        $Caracteristica->ImovelId               = $Data['EdIdImovelCaracteristicas'];
        $Caracteristica->CaracteristicaImovelId = $Data['CbCaracteristica'];
        $Caracteristica->Descricao              = $Data['EdDescricaoCaracteristica'];
        $PkInserida = $Caracteristica->save();

        $DataRetorno = $this->model->rawQuery("select tbc.Nome, ic.Descricao, ic.DataCriacao" .
            " from ImovelCaracteristicas ic join TbCaracteristicasImovel tbc on ic.CaracteristicaImovelId = tbc.Id " .
            " where ic.Id = '" . $PkInserida . "'");

        return  ['respostaAddCaracteristica' => $DataRetorno ];


    }

    public function onFormModalAlugarImovel()   {
        $Data = post();


        //Insere na tabela ImovelContratos
        $ImovelContrato                 = new ImovelContrato();
//        $ImovelContrato->NumeroContrato = intval($NumeroContrato);
//        $ImovelContrato->NumeroContrato = 4;
        $ImovelContrato->DataInicio     = $Data['EdDataInicioContrato'];
        $ImovelContrato->DataFim        = $Data['EdFimContrato'];
        $ImovelContrato->TempoContrato  = (int)$Data['EdDuracaoContrato'];
        $ImovelContrato->DiaVencimento  = (int)$Data['EdDiaVencimento'];
        $ImovelContrato->Ativo          = ($Data['CkAtivoContratoAlguel'] ? 1: 0);
        $ImovelContrato->Renovacao      = 0;
        $ImovelContrato->ImovelId       = $Data['EdImovelAlugar'];
        $ImovelContrato->PessoaId       = $Data['EdIdPessoaAlugar'];
        $ImovelContrato->RenovacaoData  = null;
        $ImovelContrato->UsuarioId      = null;
        $ImovelContrato->CondicaoPagamentoId = null;

        try {
            $IdImovelContrato = $ImovelContrato->save();
        } catch (\Exception $e) {
            return ['erro'=> $e->getMessage()];
        }

        $this->model->rawQuery("update ImovelContratos set NumeroContrato = (select MAX(COALESCE(NumeroContrato, 0)) + 1 from ImovelContratos) where Id = '" . $IdImovelContrato . "'");

        $NumeroContrato = $this->model->rawQuery("select NumeroContrato from ImovelContratos where Id = '" . $IdImovelContrato . "'");
// return ['teste'=>$NumeroContrato];
        $Data['NumeroContrato'] = $NumeroContrato;
        $Data['Ativo']          = ($Data['CkAtivoContratoAlguel'] ? 1: 0);
        $Data['Renovacao']      = 0;




        //Muda a situação do Imovel
        $this->model::where('Id',$Data['EdImovelAlugar'])->update(['Situacao' => 'Alugado']);

        //Localiza os dados do imovel
        $Imovel = $this->model::find($Data['EdImovelAlugar']);

        //Insere na tabela vinculos
        $Vinculo                 = new VinculoPessoaImovel();
        $Vinculo->ImovelId       = $Imovel->Id;
        $Vinculo->PessoaId       = $Data['EdIdPessoaAlugar'];
        $Vinculo->TipoVinculoId  = '{00000001-0000-0000-0000-000000000000}'; //Locatario
        $Vinculo->Percentual     = 100;
        $Vinculo->Ativo          = 1;
        $Vinculo->save();

        //Insere as parcelas
        for ($i = 1; $i <= intval($Data['EdDuracaoContrato']); $i++) {

            $ArrayDataVencimento   = explode('-', $Data['EdDataInicioContrato']);
            $DataVencimentoBase    = $ArrayDataVencimento[0] . '-' . $ArrayDataVencimento[1] . '-' . $Data['EdDiaVencimento'];
            $DataVencimentoEfetiva = month_add($DataVencimentoBase,$i-1);
            $DataVencimentoEfetiva = next_util_day($DataVencimentoEfetiva);
            $DataVencimentoEfetivaArray = explode('-', $DataVencimentoEfetiva);

            $Parcela = new ImovelContratoParcelas();
            $Parcela->ImovelContratoId = $IdImovelContrato;
            $Parcela->NumeroParcela    = $i;
            $Parcela->DiaReferencia    = $DataVencimentoEfetivaArray[2];
            $Parcela->MesReferencia    = $DataVencimentoEfetivaArray[1];
            $Parcela->AnoReferencia    = $DataVencimentoEfetivaArray[0];
            $Parcela->DataVencimento   = $DataVencimentoEfetiva;
            $Parcela->Pago             = 0;
            $Parcela->Vencido          = 0;
            $Parcela->Cancelado        = 0;
            $Parcela->Valor            = $Imovel->ValorAluguel;
            $Parcela->save();
        }
        return  ['respostaAddAluguel' => $Data];
    }

    public function onFormModalVendeImovel()   {
        $Data = post();

        $FormaPgEntrada      = null;
        $DataPossivelEntrada = null;
        $QntParcelasEntrada  = 1;
        $ValorEntrada        = 0;
        $QntParcelasFin      = 1;
        $ValorFin            = 0;

        $ProximaProposta = $this->model->rawQuery("SELECT NEXT VALUE FOR seq_numero_proposta ProximaProsta");

        foreach( $Data['CbTipoPagamentoCad'] as $key => $n ) {

            //Entrada
            if ($Data['CbTipoPagamentoCad'][$key] == '00000001-0000-0000-0000-000000000000')    {
                $FormaPgEntrada      = $Data['CbFormaPagamentoCad'][$key];
                $DataPossivelEntrada = $Data['EdDataVencimentoCad'][$key];
                $QntParcelasEntrada  = $Data['EdParcelasCad'][$key];
                $ValorEntrada        = $Data['EdValorCad'][$key];
            } else {
                $QntParcelasFin      = $Data['EdParcelasCad'][$key];
                $ValorFin            = $Data['EdValorCad'][$key];
            }
        }



//        $DataHoje = date('Ymd', strtotime(date('d/m/Y'). ' + 30 days'));
        $DataValidade = date("Ymd",strtotime("+30 day",strtotime("now")));

        $Proposta = new Proposta();
        $Proposta->Nome                     = 'Proposta ' . str_pad($ProximaProposta->ProximaProsta, 5, "0", STR_PAD_LEFT);
        $Proposta->FormaPagamentoEntrada    = $FormaPgEntrada;
        $Proposta->DataValidade             =  $DataValidade;
        $Proposta->DataPossivelEntrada      = $DataPossivelEntrada;
//        $Proposta->DataMensalidadeParcela =
        $Proposta->DataEmissao              = date('Ymd');
        $Proposta->QtdParcelasFinanciamento = $QntParcelasFin;
        $Proposta->NumParcelasEntrada       = $QntParcelasEntrada;
        $Proposta->NumParcelasFinanciamento = $QntParcelasFin;
        $Proposta->ValorEntrada             = $ValorEntrada;
        $Proposta->ValorFinanciado          = $ValorFin;
        $Proposta->ValorTotalEntrada        = $ValorEntrada;
        $Proposta->ValorTotalFinanciado     = $ValorFin;
        $Proposta->ValorProposta            = $ValorFin + $ValorEntrada;
        $Proposta->ValorParcelaEntrada      = $ValorEntrada / $QntParcelasEntrada;
        $Proposta->ValorParcelaFinanciada   = $ValorFin / $QntParcelasFin;
        //$Proposta->ComissaoTotalPercentual  =
        //$Proposta->ComissaoTotalValor       =
        //$Proposta->UsuarioId =
        $Proposta->ImovelId = $Data['EdIdImovel'];
        //$Proposta->CorretorId =
        $Proposta->StatusPropostaId = '00000001-0000-0000-0000-000000000000';
        $IdProposta = $Proposta->save();


        foreach( $Data['CbTipoPagamentoCad'] as $key => $n ) {

            $PropostaValor = new PropostaValores();
            $PropostaValor->DataVencimento       = $Data['EdDataVencimentoCad'][$key];
            $PropostaValor->Valor                = $Data['EdValorCad'][$key];
            $PropostaValor->ValorParcela         = $Data['EdValorCad'][$key] / $Data['EdParcelasCad'][$key];
            $PropostaValor->QtdParcelas          = $Data['EdParcelasCad'][$key];
            $PropostaValor->PropostaId           = $IdProposta;
            $PropostaValor->TbTipoPagamentoId    = $Data['CbTipoPagamentoCad'][$key];
            $PropostaValor->Periodicidade        = $Data['CbPeriodicidadeCad'][$key];
            $PropostaValor->AtualizacaoMonetaria = $Data['CbAtulizacaoMonetariaCad'][$key];
            $PropostaValor->FormaPagamento       = $Data['CbFormaPagamentoCad'][$key];
            $PropostaValor->save();

        }

        foreach( $Data['EdTipoPartesCad'] as $key => $n ) {
            $PropostaVinculo = new VinculoPessoaProposta();
            $PropostaVinculo->ExibeProposta        = 'S';
            $PropostaVinculo->Percentual           = 100;
            $PropostaVinculo->PropostaId           = $IdProposta;
            $PropostaVinculo->TipoPartePropostaId  = $Data['EdTipoPartesCad'][$key];
            $PropostaVinculo->PessoaId             = $Data['EdIdPessoaCad'][$key];
            $retorno = $PropostaVinculo->save();
        }

        //Muda o status do Imovel
        $Imovel = Imovel::find($Data['EdIdImovel']);
        $Imovel->Situacao = 'Negociação';
        $Imovel->save();


        $Propostas = $Proposta::where('ImovelId', '=', $Data['EdIdImovel'])->get();

        return [
            'respostaAddContratoVenda'=>'ok',
            'PropostaId'=>$IdProposta,
            'Propostas'=> $Propostas
        ];

    }

    public function onGraficoLigacoes()  {
        //Carrega o grafico das ligações por mes
        $SqlMes = " select MONTH(c.DataCriacao) as Mes, YEAR(c.DataCriacao) as Ano, count(c.DataCriacao) as Qnt   " .
            " from Crms c " .
            " where c.ImovelId = '" . Post('EdImovel') . "'" .
            " group by MONTH(c.DataCriacao) , YEAR(c.DataCriacao)  ";


        $GraficoLigacoesPorMes = $this->model->rawQuery($SqlMes);

        if ($GraficoLigacoesPorMes != '') {

            if (gettype($GraficoLigacoesPorMes) == 'object')    {
                $GraficoLigacoesPorMesLabel[] = TraduzMeses($GraficoLigacoesPorMes->Mes, true);
                $GraficoLigacoesPorMesData[] = $GraficoLigacoesPorMes->Qnt;
            } else {

                foreach ($GraficoLigacoesPorMes as $obj)    {
                    $GraficoLigacoesPorMesLabel[] = TraduzMeses($obj->Mes, true) . ' / ' . $obj->Ano;
                    $GraficoLigacoesPorMesData[] = $obj->Qnt;
                }
            }


        } else {
            $GraficoLigacoesPorMesLabel[] = 'erro';
            $GraficoLigacoesPorMesData[]  = 'erro';
        }


        //Carrega o grafico das ligações por midia
        $SqlTipoMidia = " select tm.Nome TipoMidia, count(c.DataCriacao) as Qnt  " .
            " from Crms c join TbTiposMidia tm on c.TipoMidiaId = tm.id " .
            " where c.ImovelId = '" . Post('EdImovel') . "'" .
            " group by tm.Nome ";


        $GraficoLigacoesPorMidia = $this->model->rawQuery($SqlTipoMidia);

        if ($GraficoLigacoesPorMidia != '') {

            if (gettype($GraficoLigacoesPorMidia) == 'object')    {
                $GraficoLigacoesPorMidiaLabel[] = $GraficoLigacoesPorMidia->TipoMidia;
                $GraficoLigacoesPorMidiaData[] = $GraficoLigacoesPorMidia->Qnt;
            } else {

                foreach ($GraficoLigacoesPorMidia as $obj)    {
                    $GraficoLigacoesPorMidiaLabel[] = $obj->TipoMidia;
                    $GraficoLigacoesPorMidiaData[] = $obj->Qnt;
                }
            }


        } else {
            $GraficoLigacoesPorMidiaLabel[] = 'erro';
            $GraficoLigacoesPorMidiaData[] = 'erro';
        }


        return [
            'LabelMes'  => $GraficoLigacoesPorMesLabel,
            'DataMes'   => $GraficoLigacoesPorMesData,
            'LabelMidia'=> $GraficoLigacoesPorMidiaLabel,
            'DataMidia' => $GraficoLigacoesPorMidiaData
        ];
    }

    public function PostImg()   {

        $PathStorage = path_storage() . DS . 'media' . DS . 'imoveis' . DS;
        $PathImovelAtual = $PathStorage . Post('ImovelId') . '/';

        //Verifica se a pasta vistoria existe
        if (file_exists($PathStorage) == false)    {
            mkdir($PathStorage);
        }

        //Verifica se a pasta especifica da vistoria existe
        if (file_exists($PathImovelAtual) == false)    {
            mkdir($PathImovelAtual);
        }

        $TempExtensao = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION);
        $TempFileName = md5_file($_FILES['file']['tmp_name']) . '.' . $TempExtensao;


//        move_uploaded_file($_FILES['file']['tmp_name'],$PathImovelAtual . $_FILES['file']['name']);
        move_uploaded_file($_FILES['file']['tmp_name'],$PathImovelAtual . $TempFileName);
        echo json_encode(["teste"=>$_FILES]);
    }

//Eventos

    public function onRun(): void    {
        //Adiciona o lightGallery
        $this->addStyle(common_assets('plugin/lightGallery-master/dist/css/lightgallery.css'));
        $this->addScript(common_assets('plugin/lightGallery-master/dist/js/lightgallery.min.js'));
        $this->addScript('https://cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js');
        $this->addScript(common_assets('plugin/lightGallery-master/modules/lg-thumbnail.min.js'));
        $this->addScript(common_assets('plugin/lightGallery-master/modules/lg-fullscreen.min.js'));

        //Adiciona o dropzone
        $this->addScript(tpl_assets('js/plugin/dropzone/dropzone.min.js'));

        //Adiciona o ChartsJS
        $this->addScript(tpl_assets('js/plugin/chartjs/chart.min.js'));

        $this->addScript('assets/js/imoveis.js');
    }


}